package com.iso27001planner.service;

import com.iso27001planner.entity.Risk;
import com.iso27001planner.repository.RiskRepository;
import com.lowagie.text.*;
import com.lowagie.text.Font;
import com.lowagie.text.Image;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.awt.*;
import java.io.OutputStream;
import java.time.LocalDateTime;
import java.util.*;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Service
@RequiredArgsConstructor
public class PdfExportService {

    private final RiskRepository riskRepository;

    public void writeRisksToPdf(Long companyId, OutputStream outputStream) throws Exception {
        List<Risk> risks = riskRepository.findByCompany_Id(companyId);
        Document document = new Document();
        PdfWriter.getInstance(document, outputStream);
        document.open();

        Font font = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14);
        document.add(new Paragraph("Risk Report", font));
        document.add(new Paragraph(" "));

        for (Risk r : risks) {
            document.add(new Paragraph("Title: " + r.getTitle()));
            document.add(new Paragraph("Asset: " + (r.getAsset() != null ? r.getAsset().getName() : "")));
            document.add(new Paragraph("Threat: " + r.getThreat()));
            document.add(new Paragraph("Likelihood: " + r.getLikelihood()));
            document.add(new Paragraph("Impact: " + r.getImpact()));
            document.add(new Paragraph("Severity: " + r.getSeverity()));
            document.add(new Paragraph("Due Date: " + r.getDueDate()));
            document.add(new Paragraph("-----------------------------"));
        }

        document.close();
    }

    public void writeRisksToPdfTable(Long companyId, OutputStream outputStream) throws Exception {
        List<Risk> risks = riskRepository.findByCompany_Id(companyId);

        Document document = new Document(PageSize.A4);
        PdfWriter.getInstance(document, outputStream);
        document.open();

        // üñºÔ∏è Logo (assumed in resources/static/logo.png)
        try {
            Image logo = Image.getInstance(Objects.requireNonNull(getClass().getClassLoader().getResource("static/LOGO.png")));
            logo.scaleToFit(90, 90);
            logo.setAlignment(Element.ALIGN_CENTER);
            document.add(logo);
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è Logo not found or failed to load.");
        }

        // üìÑ Title
        Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18);
        Paragraph title = new Paragraph("ISO 27001 ‚Äì Risk Report", titleFont);
        title.setAlignment(Element.ALIGN_CENTER);
        document.add(title);
        document.add(Chunk.NEWLINE);

        // üìä Table
        PdfPTable table = new PdfPTable(6);
        table.setWidthPercentage(100);
        table.setWidths(new int[]{3, 3, 2, 2, 2, 2});

        Font headerFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12);
        Stream.of("Title", "Asset", "Likelihood", "Impact", "Severity", "Due Date").forEach(col -> {
            PdfPCell cell = new PdfPCell(new Phrase(col, headerFont));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBackgroundColor(Color.LIGHT_GRAY);
            table.addCell(cell);
        });

        Font rowFont = FontFactory.getFont(FontFactory.HELVETICA, 11);
        for (Risk r : risks) {
            table.addCell(new Phrase(r.getTitle(), rowFont));
            table.addCell(new Phrase(r.getAsset() != null ? r.getAsset().getName() : "-", rowFont));
            table.addCell(new Phrase(r.getLikelihood(), rowFont));
            table.addCell(new Phrase(r.getImpact(), rowFont));
            table.addCell(new Phrase(r.getSeverity(), rowFont));
            table.addCell(new Phrase(r.getDueDate() != null ? r.getDueDate() : "-", rowFont));
        }

        document.add(table);
        document.add(Chunk.NEWLINE);

        // üì• Footer
        Font footerFont = FontFactory.getFont(FontFactory.HELVETICA_OBLIQUE, 10, Color.GRAY);
        Paragraph footer = new Paragraph("Generated by Protected Consulting ISO 27001 Planner ‚Äì " + LocalDateTime.now(), footerFont);
        footer.setAlignment(Element.ALIGN_CENTER);
        document.add(footer);

        document.close();
    }

    public void generateCustomRiskReport(Long companyId, List<String> sections, OutputStream out) throws Exception {
        List<Risk> risks = riskRepository.findByCompany_Id(companyId);
        Document doc = new Document(PageSize.A4);
        PdfWriter.getInstance(doc, out);
        doc.open();

        // Header
        try {
            Image logo = Image.getInstance(Objects.requireNonNull(getClass().getClassLoader().getResource("static/LOGO.png")));
            logo.scaleToFit(90, 90);
            logo.setAlignment(Element.ALIGN_CENTER);
            doc.add(logo);
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è Logo not found or failed to load.");
        }
        Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18);
        Paragraph title = new Paragraph("ISO 27001 ‚Äì Risk Report", titleFont);
        title.setAlignment(Element.ALIGN_CENTER);
        doc.add(title);
        doc.add(Chunk.NEWLINE);

        if (sections.contains("summary")) addRiskSummary(doc, risks);
        if (sections.contains("details")) addRiskDetailsTable(doc, risks);
        if (sections.contains("matrix")) addRiskMatrix(doc, risks);
        if (sections.contains("treatment")) addRiskTreatmentPlans(doc, risks);
        if (sections.contains("trends")) addRiskTrendsPlaceholder(doc); // Optional

        Font footerFont = FontFactory.getFont(FontFactory.HELVETICA_OBLIQUE, 10, Color.GRAY);
        Paragraph footer = new Paragraph("Generated by Protected Consulting ISO 27001 Planner ‚Äì " + LocalDateTime.now(), footerFont);
        footer.setAlignment(Element.ALIGN_CENTER);
        doc.add(footer);
        doc.close();
    }

    private void addRiskSummary(Document doc, List<Risk> risks) throws DocumentException {
        Map<String, Long> countBySeverity = risks.stream()
                .collect(Collectors.groupingBy(Risk::getSeverity, Collectors.counting()));

        Font header = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14);
        Font row = FontFactory.getFont(FontFactory.HELVETICA, 12);

        doc.add(new Paragraph("üìä Risk Summary", header));
        doc.add(Chunk.NEWLINE);

        PdfPTable table = new PdfPTable(2);
        table.setWidths(new int[]{4, 2});
        table.setWidthPercentage(60);

        table.addCell(new Phrase("Severity", row));
        table.addCell(new Phrase("Count", row));

        for (Map.Entry<String, Long> entry : countBySeverity.entrySet()) {
            table.addCell(new Phrase(capitalize(entry.getKey()), row));
            table.addCell(new Phrase(String.valueOf(entry.getValue()), row));
        }

        doc.add(table);
        doc.add(Chunk.NEWLINE);
    }

    private void addRiskDetailsTable(Document doc, List<Risk> risks) throws DocumentException {
        Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14);
        Font rowFont = FontFactory.getFont(FontFactory.HELVETICA, 11);
        doc.add(new Paragraph("üìÑ Risk Details", titleFont));
        doc.add(Chunk.NEWLINE);

        PdfPTable table = new PdfPTable(6);
        table.setWidthPercentage(100);
        table.setWidths(new int[]{3, 3, 2, 2, 2, 2});

        Stream.of("Title", "Asset", "Likelihood", "Impact", "Severity", "Due Date")
                .forEach(col -> {
                    PdfPCell cell = new PdfPCell(new Phrase(col, rowFont));
                    cell.setBackgroundColor(Color.LIGHT_GRAY);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);
                });

        for (Risk r : risks) {
            table.addCell(new Phrase(r.getTitle(), rowFont));
            table.addCell(new Phrase(r.getAsset() != null ? r.getAsset().getName() : "-", rowFont));
            table.addCell(new Phrase(r.getLikelihood(), rowFont));
            table.addCell(new Phrase(r.getImpact(), rowFont));
            table.addCell(new Phrase(r.getSeverity(), rowFont));
            table.addCell(new Phrase(r.getDueDate() != null ? r.getDueDate() : "-", rowFont));
        }

        doc.add(table);
        doc.add(Chunk.NEWLINE);
    }

    private void addRiskMatrix(Document doc, List<Risk> risks) throws DocumentException {
        doc.add(new Paragraph("üìê Risk Matrix", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14)));
        doc.add(Chunk.NEWLINE);

        Map<String, Map<String, Long>> matrix = new TreeMap<>();
        for (Risk r : risks) {
            String likelihood = r.getLikelihood();
            String impact = r.getImpact();

            matrix.putIfAbsent(likelihood, new TreeMap<>());
            Map<String, Long> impactMap = matrix.get(likelihood);
            impactMap.put(impact, impactMap.getOrDefault(impact, 0L) + 1);
        }

        Set<String> allImpacts = matrix.values().stream()
                .flatMap(m -> m.keySet().stream()).collect(Collectors.toSet());

        PdfPTable table = new PdfPTable(allImpacts.size() + 1);
        table.setWidthPercentage(90);

        table.addCell("Likelihood \\ Impact");
        for (String impact : allImpacts) {
            table.addCell(capitalize(impact));
        }

        for (String likelihood : matrix.keySet()) {
            table.addCell(capitalize(likelihood));
            for (String impact : allImpacts) {
                Long count = matrix.getOrDefault(likelihood, new TreeMap<>()).getOrDefault(impact, 0L);
                table.addCell(String.valueOf(count));
            }
        }

        doc.add(table);
        doc.add(Chunk.NEWLINE);
    }


    private void addRiskTreatmentPlans(Document doc, List<Risk> risks) throws DocumentException {
        Font header = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14);
        Font rowFont = FontFactory.getFont(FontFactory.HELVETICA, 11);
        doc.add(new Paragraph("üõ°Ô∏è Treatment Plans", header));
        doc.add(Chunk.NEWLINE);

        PdfPTable table = new PdfPTable(4);
        table.setWidthPercentage(100);
        table.setWidths(new int[]{3, 4, 2, 2});

        Stream.of("Title", "Treatment", "Status", "Due Date").forEach(col -> {
            PdfPCell cell = new PdfPCell(new Phrase(col, rowFont));
            cell.setBackgroundColor(Color.LIGHT_GRAY);
            table.addCell(cell);
        });

        for (Risk r : risks) {
            table.addCell(new Phrase(r.getTitle(), rowFont));
            table.addCell(new Phrase(r.getTreatment(), rowFont));
            table.addCell(new Phrase(r.getStatus(), rowFont));
            table.addCell(new Phrase(r.getDueDate() != null ? r.getDueDate() : "-", rowFont));
        }

        doc.add(table);
        doc.add(Chunk.NEWLINE);
    }

    private void addRiskTrendsPlaceholder(Document doc) throws DocumentException {
        Font header = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14);
        doc.add(new Paragraph("üìà Risk Trends (Coming Soon)", header));
        doc.add(new Paragraph("Trend analytics and graphical insights will be added in a future version."));
        doc.add(Chunk.NEWLINE);
    }

    private String capitalize(String s) {
        if (s == null || s.isEmpty()) return "-";
        return s.substring(0, 1).toUpperCase() + s.substring(1).toLowerCase();
    }
}
